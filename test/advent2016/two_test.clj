(ns advent2016.two-test
  (:require [clojure.test :refer :all]
            [advent2016.two :refer :all]))

(deftest up-test
  (testing "up"
    (is (= (up 1) 1))
    (is (= (up 2) 2))
    (is (= (up 9) 6))))

(deftest down-test
  (testing "down"
    (is (= (down 1) 4))
    (is (= (down 5) 8))
    (is (= (down 9) 9))))

(deftest right-test
  (testing "right"
    (is (= (right 1) 2))
    (is (= (right 5) 6))
    (is (= (right 9) 9))))

(deftest left-test
  (testing "left"
    (is (= (left 1) 1))
    (is (= (left 5) 4))
    (is (= (left 9) 8))))

(deftest direction-test
  (testing "handle_direction"
    (is (= ((handle_direction false) 5 "U") (up 5)))
    (is (= ((handle_direction false) 9 "R") (right 9)))))

(deftest do-line-test
  (testing "do-line"
    (is (= (do-line 5 "UUL" false) 1))
    (is (= (do-line 1 "RRDDD" false) 9))
    (is (= (do-line 9 "LURDL" false) 8))
    (is (= (do-line 8 "UUUUD" false) 5))))

(deftest combine-test
  (testing "combine"
    (is (= ((combine false) [5] "UUL") [5 1]))
    (is (= ((combine false) [5 1] "RRDDD") [5 1 9]))
    (is (= ((combine false) [5 1 9] "LURDL") [5 1 9 8]))
    (is (= ((combine false) [5 1 9 8] "UUUUD") [5 1 9 8 5]))))

(def input1 "ULL
RRDDD
LURDL
UUUUD")

(deftest do-input-test
  (testing "do-input-test"
    (is (= (do-input input1 false) [5 1 9 8 5]))))

(def input2 "UULDRRRDDLRLURUUURUURDRUURRDRRURUDRURRDLLDRRRDLRUDULLRDURLULRUUURLDDRURUDRULRDDDUDRDLDDRDDRUURURRDDRLRLUDLUURURLULLLRRDRLDRLRDLULULRDRDDUURUDRRURDLRRDDDLUULDURDLDLLRLRLLUDUDLRDDLUURUUDDRDULDDLDLLDULULRLDDDUDDDRLLRURLRDUUUDUUDDURRDLDDLRDLLUDDLDRLDULDRURLUUDLURLUDRULRLRUUUURLUUUDDULLRLLURDRURLLRLRLDDRURURULRULLUUUULUDULDDDRDDLURLUURRLDDRDRUDDRRLURRDURRLDUULRRLLRDLLDDUURULLRUURRRRDRRURLULLRLRDDULULRDLDDLULLD
UUDUDDRRURRUDDRLDLURURLRLLDRLULLUURLLURDRLLURLLRRLURDLDURUDRURURDLRDRRDULRLLLRDLULDRLLDLDRLDDRUUUUULRLDUURDUUUURUUDLRDLLDRLURULDURURLDLLRDLULLULLLLLUDUDDLRLLLUDLRUUDDUUDUDDDLULDDUDUULUUDUDRRULRRRURUDUUULDDRURLLULLULURLUDRDLUUUDLDRRLRRRULLRRURRUDDDRDLDDDLDUDLLDRRDURRURRURRLDLURUULRLDLUDUDUUULULUUDDDLDDULRDULLULDRDDURRURRRULRDURULUDURRDLLUURRUURLLLULDRRULUUUURLRLRDDDDULLUUUDRRLRRLRRLLLUDDDLRDDURURRDULLLUDLUDURRLRDURUURURDRDUUURURRUDRURRULLDDURRLRRRUULDRLDRRURUDLULRLLRRDLDDRLRRULDDLLUURUDDUDRLUD
DDDUDDRRDRRRUULDRULDLDLURRRUURULRUDDRLLLLURRLRULDLURRULDRUDRRLLLLDULRDLUUURDDLDLURRLLUUURLLUDLUDRRDDULLULURDULRRDLRLDRRUUUUDLRRDLDDLDULDRUULRLLDLRURRUDLDDDRUUULLDDLULDULDUURUDDDLULUDLUURLRURUURDDUDRRLDRRRDDDDRDLUDRRDURDLDRURDDDRRLLLRDDRRRDDLDRLLUURRLDRDDRDLRDDLLDRLRDRDDDURLULLRUURDLULRURRUUDLDRLDRRDDRLDDUULLRDDRRLLLDDDUURDUDRUDUDULDULRUURLDURRDLUURRDLLDDLLURUUUDRLUURRDLUDUULRURLUDDLLRUDURRDRRRDRDLULRRLRUDULUUDRLURRRRLULURRDLLDRDDRLULURDURRDUUULLRDUUDLDUDURUDRUDDLRLULRLRLRRRLRUULLDDLUDDLDRRRLDDLLRLRLRUDULRLLLUULLDRDLDRRDULLRRLLDLDUDULUDDUUDLRDRLUUULLRLDLDDLLRUDDRDD
DDUURRLULDLULULLDUDDRURDDRLRDULUURURRLURDLRRDUUDLULDRDLDLRLULLRULLDRLDRRULUDRLDURUURLLDLLDDLUULLRLRULRLUURDDDDDRLDRLLLDLULDLDLULRRURLLLLLLRLUDLRRLRULUULLLLURDLLRLLDDUDLLULDLLURUUDLRDRDUDDDRDDUULRLLDDDLLRLURLUDLULRRUUUULLDLDLLLDRLUDRDRDLUDLRUDRDRUDRDLLDDLRRLRDLDURDLDRUUUDRLULUULDURDLUUUDDDDDLDRDURDLULDDLLUDUURRUDDLURUDDLRLUUDURUDUULULUDLDLUURDULURURULDDDLUUUUDLUUDUDLLLRDDLRDDLRURRRLLLULLURULLRDLLDRULRDDULULRLUDRRRDULRLLUDUULLRDRDDDULULRURULDLDLDRDLDUDRDULLUUUUUDLRDURDUUULLLRUULLRUULDRRUUDLLLULLUURLDDLUULLRLRLRDRLLLRLURDDURUDUULULDLRLRLLUDURRURDRUDLRDLLRDDRDUULRDRLLRULLUDDRLDLDDDDUDRDD
URDLUDUDLULURUDRLUDLUDLRLRLLDDDDDLURURUURLRDUDLRRUUDUURDURUULDRRRDDDLDUURRRDLRULRRDLRUDUDLDDDLLLRLRLRUUUUUULURRRLRLUDULURLDLLDUUDDRUDLDUDRRLULLULLDURDDRRLLRLDLLLLRLULLDDDDLDULLRDUURDUDURRUULLDRULUDLUULUUDDLDDRDLULLULDLDRLDLRULLRLURDURUDRLDURDRULRLLLLURRURLRURUDUDRRUDUUDURDDRRDRLURLURRLDRRLLRLRUDLRLLRLDLDDRDLURLLDURUDDUUDRRLRUDLUDULDRUDDRDRDRURDLRLLRULDDURLUUUUDLUDRRURDDUUURRLRRDDLULLLDLRULRRRLDRRURRURRUUDDDLDRRURLRRRRDLDLDUDURRDDLLLUULDDLRLURLRRURDRUULDDDUDRDRUDRRLRLLLLLURDULDUDRLULDRLUULUDDDDUDDRDDLDDRLLRULRRURDDDRDDLDLULRDDRRURRUDRDDDDRURDRRURUUDUDDUURULLDRDULURUDUD")
(deftest part1
  (testing "part 1"
    (println (do-input input2 false))))

(deftest up2-test
  (testing "up2"
    (is (= (up2 1) 1))
    (is (= (up2 "A") 6))
    (is (= (up2 "D") "B"))))

(deftest direction2-test
  (testing "handle_direction2"
    (println "starting 2")
    (is (= ((handle_direction true) 5 "U") 5))
    (is (= ((handle_direction true) "B" "D") "D"))
    (is (= ((handle_direction true) 9 "R") 9))
    (is (= ((handle_direction true) 9 "L") 8))))

(deftest do-line2-test
  (testing "do-line2"
    (is (= (do-line 5 "UUL" true) 5))
    (is (= (do-line 5 "RRDDD" true) "D"))
    (is (= (do-line "D" "LURDL" true) "B"))
    (is (= (do-line "B" "UUUUD" true) 3))))

(deftest do-input2-test
  (testing "do-input2"
    (is (= (do-input input1 true) [5 5 "D" "B" 3]))))

(deftest part2
  (testing "part 2"
    (println (do-input input2 true))))
